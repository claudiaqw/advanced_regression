fit.glm <- glm(Deaths ~ . - Case_Fatality_Ratio, family = 'poisson', data=covid.data, offset = log(Confirmed))
summary(fit.glm)
fit.glm <- glm(Deaths ~ . - Case_Fatality_Ratio, family = 'poisson', data=covid.data, offset = log(Confirmed))
summary(fit.glm)
fit.glm <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate - Hospitalization_Rate, family = 'poisson', data=covid.data, offset = log(Confirmed))
summary(fit.glm)
fit.glm <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate - Hospitalization_Rate - Testing_Rate, family = 'poisson', data=covid.data, offset = log(Confirmed))
summary(fit.glm)
fit.glm <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate - Hospitalization_Rate - Testing_Rate -Date, family = 'poisson', data=covid.data, offset = log(Confirmed))
summary(fit.glm)
fit.glm <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate - Hospitalization_Rate - Testing_Rate, family = 'poisson', data=covid.data, offset = log(Confirmed))
summary(fit.glm)
fit.glm <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate -
Hospitalization_Rate - Testing_Rate,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm)
fit.glm.poisson <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate -
Hospitalization_Rate - Testing_Rate,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson)
fit.glm.qpoisson <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate -
Hospitalization_Rate - Testing_Rate,
family = 'quasipoisson', data=covid.data, offset = log(Confirmed))
summary(fit.glm.qpoisson)
fit.glm.poisson.all <- glm(Deaths ~ . - Case_Fatality_Ratio,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.all)
exp(cbind(coef(fit.glm.poisson.all), confint(fit.glm.poisson.all)))
fit.glm.poisson <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Incident_Rate -
Hospitalization_Rate - Testing_Rate,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson)
exp(cbind(coef(fit.glm.poisson), confint(fit.glm.poisson)))
plot(effect("STARS", fit.glm.poisson), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="stars", ylab="rate", rug=FALSE, main="")
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
plot(effect("STARS", fit.glm.poisson), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="stars", ylab="rate", rug=FALSE, main="")
plot(effect("Deaths", fit.glm.poisson), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="stars", ylab="rate", rug=FALSE, main="")
setwd("C:/Users/tec005m/mds/Regresion avanzada - Javier Nogales/advanced_regression")
source('C:/Users/tec005m/mds/Regresion avanzada - Javier Nogales/Modelos Lineales Generalizados/Casos de Estudio/WineSales_CaseStudy_GLM.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
hist(rowMeans(is.na(data)))
colSums(is.na(data))
impute <- function(df, index, state, date){
new.df <- df %>%
filter(Province_State == state, month(Date) == month(date), year(Date) == year(date))
value <- mean(new.df[,index], na.rm = TRUE)
return(value)
}
data$Recovered[is.na(data$Recovered)] =
impute(data, 8, data$Province_State, data$Date)
data$People_Hospitalized[is.na(data$People_Hospitalized)] =
impute(data, 13, data$Province_State, data$Date)
data$Hospitalization_Rate[is.na(data$Hospitalization_Rate)] =
impute(data, 18, data$Province_State, data$Date)
colSums(is.na(data))
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate, Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio, Testing_Rate, Hospitalization_Rate, Date) %>%
filter(data$Date >= "2020-07-01") %>%
arrange(Date)
plot_num(covid.data)
barplot(colMeans(is.na(data)), las=2)
barplot(colMeans(is.na(data)), las=2)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
barplot(colMeans(is.na(data)), las=2)
impute <- function(df, index, state, date){
new.df <- df %>%
filter(Province_State == state, month(Date) == month(date), year(Date) == year(date))
value <- mean(new.df[,index], na.rm = TRUE)
return(value)
}
data$Recovered[is.na(data$Recovered)] =
impute(data, 8, data$Province_State, data$Date)
data$People_Hospitalized[is.na(data$People_Hospitalized)] =
impute(data, 13, data$Province_State, data$Date)
data$Hospitalization_Rate[is.na(data$Hospitalization_Rate)] =
impute(data, 18, data$Province_State, data$Date)
colSums(is.na(data))
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate, Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio, Testing_Rate, Hospitalization_Rate, Date) %>%
filter(data$Date >= "2020-07-01") %>%
arrange(Date)
plot_num(covid.data)
library(corrplot)
ggcorr(covid.data[,numeric_cols], label = T)
numeric_cols = sapply(covid.data, is.numeric)
boxplot(scale(covid.data[, numeric_cols]), las=2, col='darkblue')
library(corrplot)
ggcorr(covid.data[,numeric_cols], label = T)
barplot(covid.data$Case_Fatality_Ratio, col="darkblue")
barplot(covid.data$Case_Fatality_Ratio, col="darkblue")
barplot(covid.data$Case_Fatality_Ratio, col="blue")
covid.data %>%
ggplot(aes(x=Date, y=Case_Fatality_Ratio)) +
geom_line() +
geom_point()
covid.data %>%
ggplot(aes(x=Date, y=Case_Fatality_Ratio, color = Province_State)) +
geom_line() +
geom_point()
covid.data %>%
ggplot(aes(x=Confirmed, y=Deaths, y =Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=Confirmed, y=Deaths, color=Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=Confirmed, y=Deaths)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=Confirmed, y=Deaths, group=Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=Confirmed, y=Deaths, group=Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = Province_State, y = "", col = "")
covid.data %>%
ggplot(aes(x=Confirmed, y=Deaths, group=Province_State, color = Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
set.seed(42)
trainIndex <- createDataPartition(c(covid.data$Province_State), p = .7,
list = FALSE,
times = 1)
training <- covid.data[ trainIndex,]
testing <- covid.data[-trainIndex,]
fit.lm <- lm(Case_Fatality_Ratio ~ ., data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm <- lm(Case_Fatality_Ratio ~ . -Deaths, data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm.log <- lm(log(Case_Fatality_Ratio+1) ~ . - Deaths, data=training)
summary(fit.lm.log)
par(mfrow=c(2,2))
plot(fit.lm.log)
fit.lm.log <- lm(log(Case_Fatality_Ratio+1) ~ . - Deaths, data=training)
summary(fit.lm.log)
par(mfrow=c(2,2))
plot(fit.lm.log)
fit.glm.poisson.all <- glm(Deaths ~ . - Case_Fatality_Ratio,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.all)
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Province_State - ,
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Province_State - Active
family = 'poisson', data=training, offset = log(Confirmed))
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Province_State - Active,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.state)
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Province_State - Active - Date,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.state)
exp(cbind(coef(fit.glm.poisson.state), confint(fit.glm.poisson.state)))
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Date,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.state)
exp(cbind(coef(fit.glm.poisson.state), confint(fit.glm.poisson.state)))
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Date -People_Hospitalized,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.state)
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Date -People_Hospitalized,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.state)
exp(cbind(coef(fit.glm.poisson.state), confint(fit.glm.poisson.state)))
fit.glm.poisson.state <- glm(Deaths ~ . - Case_Fatality_Ratio - Active - Date -People_Hospitalized - Testing_Rate,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.state)
exp(cbind(coef(fit.glm.poisson.state), confint(fit.glm.poisson.state)))
glm.select <- glm(Deaths ~ Active + Total_Test_Result + Recovered + People_Hospitalized,
family = 'poisson', data=training, offset = log(Confirmed))
glm.select <- glm(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized,
family = 'poisson', data=training, offset = log(Confirmed))
summary(fit.glm.poisson.state)
glm.select <- glm(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized,
family = 'poisson', data=training, offset = log(Confirmed))
summary(glm.select)
exp(cbind(coef(glm.select), confint(glm.select)))
glm.select.state <- glm(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
family = 'poisson', data=training, offset = log(Confirmed))
summary(glm.select.state)
exp(cbind(coef(glm.select.state), confint(glm.select.state)))
plot(effect("People_Hospitalized", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="stars", ylab="rate", rug=FALSE, main="")
plot(effect("People_Hospitalized", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="people hospitalized", ylab="deaths", rug=FALSE, main="")
# a very clear relation
plot(effect("People_Hospitalized", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="people hospitalized", ylab="Active", rug=FALSE, main="")
# a very clear relation
plot(effect("Active", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="people hospitalized", ylab="Active", rug=FALSE, main="")
# a very clear relation
plot(effect("Active", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="deaths", rug=FALSE, main="")
# a very clear relation
plot(effect("Recovered", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="deaths", rug=FALSE, main="")
# a very clear relation
plot(effect("Recovered", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="deaths", rug=FALSE, main="")
# a very clear relation
plot(effect("Recovered", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Recovered", ylab="deaths", rug=FALSE, main="")
# a very clear relation
plot(effect("State", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="deaths", rug=FALSE, main="")
plot(effect("Province_State", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="deaths", rug=FALSE, main="")
# a very clear relation
plot(effect("Province_State", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="State", ylab="deaths", rug=FALSE, main="")
# a very clear relation
# All effects on target:
plot(allEffects(glm.select.state), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
# All effects on target:
plot(allEffects(glm.select), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
plot(effect("Active:Province_State", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Active", ylab="rate", rug=FALSE, main="")
# a very clear relation
plot(effect("Province_State:Active", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Active", ylab="rate", rug=FALSE, main="")
plot(effect("Province_State:Active", glm.select.state), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Active", ylab="rate", rug=FALSE, main="")
glm.select.state.qp <- glm(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
family = 'quasipoisson', data=training, offset = log(Confirmed))
summary(glm.select.state.qp)
exp(cbind(coef(glm.select.state.qp), confint(glm.select.state.qp)))
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
family = 'quasipoisson', data=training, offset = log(Confirmed))
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
family = 'quasipoisson', data=training, offset = log(Confirmed))
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
family = 'quasipoisson', data=training, offset = log(Confirmed))
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State + Confirmed,
family = 'quasipoisson', data=training, offset = log(Confirmed))
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
data=training, offset = log(Confirmed))
View(training)
View(training)
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
data=training)
summary(glm.select.state.nb)
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
data=training, offset=log(Confirmed))
colnames(training)
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
data=training, offset=log('Confirmed'))
glm.select.state.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized + Province_State,
data=training)
summary(glm.select.state.nb)
glm.select.nb <- glm.nb(Deaths ~ Active + Total_Test_Results + Recovered + People_Hospitalized,
data=training)
summary(glm.select.nb)
exp(cbind(coef(glm.select.nb), confint(glm.select.nb)))
predict(glm.select.nb, newdata=testing, type = "response")
predict(glm.select, newdata=testing, type = "response")
predictions = round(predict(glm.select.nb, newdata=testing, type = "response"), 0)
predictions = round(predict(glm.select.nb, newdata=testing, type = "response"), 0)
predictions = round(predict(glm.select.nb, newdata=testing, type = "response"), 0)
head(predictions,20)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
setwd("C:/Users/tec005m/mds/Regresion avanzada - Javier Nogales/advanced_regression")
data <- read.csv(file = 'data/covid_data_us.csv')
data <- read.csv(file = 'data/covid_data_us.csv')
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
library(leaflet)
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
library(leaflet)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
barplot(colMeans(is.na(data)), las=2)
impute <- function(df, index, state, date){
new.df <- df %>%
filter(Province_State == state, month(Date) == month(date), year(Date) == year(date))
value <- mean(new.df[,index], na.rm = TRUE)
return(value)
}
data$Recovered[is.na(data$Recovered)] =
impute(data, 8, data$Province_State, data$Date)
data$People_Hospitalized[is.na(data$People_Hospitalized)] =
impute(data, 13, data$Province_State, data$Date)
data$Hospitalization_Rate[is.na(data$Hospitalization_Rate)] =
impute(data, 18, data$Province_State, data$Date)
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate, Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio, Testing_Rate, Hospitalization_Rate, Date) %>%
filter(data$Date >= "2020-07-01") %>%
arrange(Date)
colSums(is.na(data))
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate, Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio, Testing_Rate, Hospitalization_Rate, Date) %>%
filter(data$Date >= "2020-07-01") %>%
arrange(Date)
View(data)
View(data)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
barplot(colMeans(is.na(data)), las=2)
impute <- function(df, index, state, date){
new.df <- df %>%
filter(Province_State == state, month(Date) == month(date), year(Date) == year(date))
value <- mean(new.df[,index], na.rm = TRUE)
return(value)
}
data$Recovered[is.na(data$Recovered)] =
impute(data, 8, data$Province_State, data$Date)
data$People_Hospitalized[is.na(data$People_Hospitalized)] =
impute(data, 13, data$Province_State, data$Date)
data$Hospitalization_Rate[is.na(data$Hospitalization_Rate)] =
impute(data, 18, data$Province_State, data$Date)
colSums(is.na(data))
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
filter(Date >= "2020-07-01") %>%
arrange(Date)
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
filter(data$Date >= "2020-07-01") %>%
arrange(data$Date)
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
filter(Date >= "2020-07-01") %>%
arrange(Date)
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
library(leaflet)
data <- read.csv(file = 'data/covid_data_us.csv')
View(data)
View(data)
install.packages("FSelectorRcpp")
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
barplot(colMeans(is.na(data)), las=2)
is.na(data$Recovered)
impute <- function(df, index, state, date){
new.df <- df %>%
filter(Province_State == state, month(Date) == month(date), year(Date) == year(date))
value <- mean(new.df[,index], na.rm = TRUE)
return(value)
}
data$Recovered[is.na(data$Recovered)] <-
impute(data, 8, data$Province_State, data$Date)
data$People_Hospitalized[is.na(data$People_Hospitalized)] <-
impute(data, 13, data$Province_State, data$Date)
data$Hospitalization_Rate[is.na(data$Hospitalization_Rate)] <-
impute(data, 18, data$Province_State, data$Date)
View(data)
View(data)
a <. na.omit(data)
a <- na.omit(data)
View(a)
View(a)
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
library(leaflet)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
barplot(colMeans(is.na(data)), las=2)
a <- na.omit(data)
View(a)
View(a)
# impute <- function(df, index, state, date){
#   new.df <- df %>%
#     filter(Province_State == state, month(Date) == month(date), year(Date) == year(date))
#   value <- mean(new.df[,index], na.rm = TRUE)
#   return(value)
# }
#
# data$Recovered[is.na(data$Recovered)] <-
#   impute(data, 8, data$Province_State, data$Date)
#
# data$People_Hospitalized[is.na(data$People_Hospitalized)] <-
#   impute(data, 13, data$Province_State, data$Date)
#
# data$Hospitalization_Rate[is.na(data$Hospitalization_Rate)] <-
#   impute(data, 18, data$Province_State, data$Date)
#
data <- na.omit(data)
covid.data <- data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
filter(Date >= "2020-07-01") %>%
arrange(Date)
data %>%
select(Province_State, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date)
data %>%
select(Province_State)
View(data)
View(data)
data
data %>%
select(Province_State)
setwd("C:/Users/tec005m/mds/Regresion avanzada - Javier Nogales/advanced_regression")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(MASS)
library(caret)
library(tidyverse)
library(MASS)
library(caret)
data <- read.csv('all-states-history.csv)
summary(data)
data <- read.csv('all-states-history.csv')
data <- read.csv('data/all-states-history.csv')
summary(data)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
data <- na.omit(data)
covid.data <- data %>%
dplyr::select(Province_State, Lat, Long_, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
dplyr::filter(Date >= "2020-07-01") %>%
dplyr::arrange(Date)
new.data <- read.csv('data/all-states-history.csv')
summary(new.data)
View(new.data)
View(new.data)
a <- na.omit(new.data)
View(a)
View(a)
barplot(colMeans(is.na(new.data)), las=2)
etnicity.data <- read.csv('data/CRDT Data - CRDT.csv')
summary(etnicity.data)
vaccine.data <- read.csv('data/cdc_vaccinations_ltc_timeseries_daily.csv')
summary(vaccine.data)
a <- na.omit(vaccine.data)
