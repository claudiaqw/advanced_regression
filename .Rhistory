geom_ribbon(data=new.predictions, aes(ymin=lwr,ymax=upr), alpha=0.3) +
labs(title = "Prediction intervals", x = "prediction", y="real price")
new.predictions %>%
ggplot(aes(x=fit, y=real))+
geom_point(aes(color=out)) + theme(legend.position="none") +
geom_ribbon(data=new.predictions, aes(ymin=lwr,ymax=upr), alpha=0.3) +
labs(title = "Prediction intervals", x = "prediction", y="real price")
# Final predictions:
yhat = test_results$comb
head(yhat) # show the prediction for 6 home prices
hist(yhat, col="lightblue")
# take care: asymmetric distribution
y = test_results$deaths
error = y-yhat
hist(error, col="lightblue")
# But the error is more symmetric
# Final predictions:
yhat = test_results$comb
hist(yhat, col="lightblue")
# take care: asymmetric distribution
y = test_results$deaths
error = y- yhat
hist(error, col="lightblue")
# But the error is more symmetric
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
barplot(colMeans(is.na(data)), las=2)
data <- na.omit(data)
colSums(is.na(data))
covid.data <- data %>%
dplyr::select(Province_State, Lat, Long_, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
dplyr::filter(Date >= "2020-07-01") %>%
dplyr::arrange(Date)
ggplot(covid.data, aes(Deaths)) + geom_density(fill="lightblue") +
xlab("Deaths") + ggtitle("Deaths distribution")
ggplot(covid.data, aes(Recovered)) + geom_density(fill="lightblue") +
xlab("Recovered") + ggtitle("Deaths distribution")
covid.data %>%
ggplot(aes(x=Confirmed, y=Recovered, group=Province_State, color = Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=scale(Confirmed), y=Recovered, group=Province_State, color = Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=scale(Confirmed), y=scale(Recovered), group=Province_State, color = Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=scale(Confirmed), y=scale(Recovered), group=Province_State)) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=scale(Confirmed), y=scale(Recovered))) +
geom_boxplot(fill="lightblue") +
labs(title = "Deaths by Confirmed", x = "", y = "", col = "")
covid.data %>%
ggplot(aes(x=scale(Confirmed), y=scale(Recovered))) +
geom_boxplot(fill="lightblue") +
labs(title = "Recovered by Confirmed", x = "", y = "", col = "")
set.seed(42)
trainIndex <- createDataPartition(c(covid.data$Province_State), p = .7,
list = FALSE,
times = 1)
training <- covid.data[ trainIndex,]
testing <- covid.data[-trainIndex,]
fit.lm <- lm(Recovered ~ . -Deaths - Lat - Long_ - Case_Fatality_Ratio, data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm <- lm(Recovered ~ . - Lat - Long_, data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm <- lm(Recovered ~ ., data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm <- lm(Recovered ~ . - Lat - Long_, data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm.log <- lm(log(Recovered) ~ .-Lat -Long_, data=training)
summary(fit.lm.log)
par(mfrow=c(2,2))
plot(fit.lm.log)
ggplot(covid.data, aes(log(Recovered)) + geom_density(fill="lightblue") +
xlab("Recovered") + ggtitle("Deaths distribution")
ggplot(covid.data, aes(x= log(Recovered))) + geom_density(fill="lightblue") +
xlab("Recovered") + ggtitle("Deaths distribution")
fit.glm.poisson.all <- glm(Recovered ~ . - Lat - Long_,
family = 'poisson', data=training)
summary(fit.glm.poisson.all)
exp(cbind(coef(fit.glm.poisson.all), confint(fit.glm.poisson.all)))
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
library(leaflet)
library(dplyr)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
data <- na.omit(data)
colSums(is.na(data))
covid.data <- data %>%
dplyr::select(Province_State, Lat, Long_, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
dplyr::filter(Date >= "2020-07-01") %>%
dplyr::arrange(Date)
ggplot(covid.data, aes(Recovered)) + geom_density(fill="lightblue") +
xlab("Recovered") + ggtitle("Deaths distribution")
ggplot(covid.data, aes(x= log(Recovered))) + geom_density(fill="lightblue") +
xlab("Recovered") + ggtitle("Deaths distribution")
plot_num(covid.data)
numeric_cols = sapply(covid.data, is.numeric)
boxplot(scale(covid.data[, numeric_cols]), las=2, col='darkblue')
library(corrplot)
ggcorr(covid.data[,numeric_cols], label = T)
covid.data %>%
ggplot(aes(x=Date, y=Case_Fatality_Ratio, color = Province_State)) +
geom_line() +
geom_point()
set.seed(42)
trainIndex <- createDataPartition(c(covid.data$Province_State), p = .7,
list = FALSE,
times = 1)
training <- covid.data[ trainIndex,]
testing <- covid.data[-trainIndex,]
fit.lm <- lm(Recovered ~ . - Lat - Long_, data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm.log <- lm(log(Recovered) ~ .-Lat -Long_, data=training)
summary(fit.lm.log)
par(mfrow=c(2,2))
plot(fit.lm.log)
fit.glm.poisson.all <- glm(Recovered ~ . - Lat - Long_,
family = 'poisson', data=training)
summary(fit.glm.poisson.all)
exp(cbind(coef(fit.glm.poisson.all), confint(fit.glm.poisson.all)))
View(data)
View(data)
vaccine.data <- read.csv('data/cdc_vaccinations_ltc_timeseries_daily.csv')
vaccine.data$Date <- as.Date(vaccine.data$Date)
vaccine.data <- vaccine.data %>%
dplyr::select(Date, Location, LongName, Census2019, Administered_Fed_LTC, Administered_Fed_LTC_Dose1, Administered_Fed_LTC_Dose2)
summary(vaccine.data)
library(dplyr)
library(tidyverse)
library(lubridate)
library(funModeling)
library(ggplot2)
library(GGally)
library(caret)
library(effects)
library(MASS)
library(pscl)
library(leaflet)
library(dplyr)
data <- read.csv(file = 'data/covid_data_us.csv')
data$Last_Update <- as.Date(data$Last_Update)
data$Date <- as.Date(data$Date)
summary(data)
barplot(colMeans(is.na(data)), las=2)
data <- na.omit(data)
colSums(is.na(data))
covid.data <- data %>%
dplyr::select(Province_State, Lat, Long_, Confirmed, Deaths, Recovered, Active, Incident_Rate,
Total_Test_Results, People_Hospitalized, Case_Fatality_Ratio,
Testing_Rate, Hospitalization_Rate, Date) %>%
dplyr::filter(Date >= "2020-07-01") %>%
dplyr::arrange(Date)
ggplot(covid.data, aes(Recovered)) + geom_density(fill="lightblue") +
xlab("Recovered") + ggtitle("Deaths distribution")
ggplot(covid.data, aes(x= log(Recovered))) + geom_density(fill="lightblue") +
xlab("Recovered") + ggtitle("Deaths distribution")
plot_num(covid.data)
numeric_cols = sapply(covid.data, is.numeric)
boxplot(scale(covid.data[, numeric_cols]), las=2, col='darkblue')
library(corrplot)
ggcorr(covid.data[,numeric_cols], label = T)
covid.data %>%
ggplot(aes(x=Date, y=Case_Fatality_Ratio, color = Province_State)) +
geom_line() +
geom_point()
set.seed(42)
trainIndex <- createDataPartition(c(covid.data$Province_State), p = .7,
list = FALSE,
times = 1)
training <- covid.data[ trainIndex,]
testing <- covid.data[-trainIndex,]
fit.lm <- lm(Recovered ~ . - Lat - Long_, data=training)
summary(fit.lm)
# Diagnosis
par(mfrow=c(2,2))
plot(fit.lm)
fit.lm.log <- lm(log(Recovered) ~ .-Lat -Long_, data=training)
summary(fit.lm.log)
par(mfrow=c(2,2))
plot(fit.lm.log)
fit.glm.poisson.all <- glm(Recovered ~ . - Lat - Long_,
family = 'poisson', data=training)
summary(fit.glm.poisson.all)
exp(cbind(coef(fit.glm.poisson.all), confint(fit.glm.poisson.all)))
glm.select <- glm(Recovered ~ Confirmed + Active + Deaths + Hospitalization_Rate,
family = 'poisson', data=training)
summary(glm.select)
View(training)
View(training)
glm.select <- glm(Recovered ~ Hospitalization_Rate:Confirmed + Deaths + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Deaths + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio*Deaths + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Active + Case_Fatality_Ratio*Deaths + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio*Active + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio*Deaths + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio*Active + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio*Deaths + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio:Active + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio*Active + Deaths:Active + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
glm.select <- glm(Recovered ~ Hospitalization_Rate*Confirmed + Case_Fatality_Ratio*Active + Deaths:Active + Province_State ,
family = 'poisson', data=training)
summary(glm.select)
exp(cbind(coef(glm.select), confint(glm.select)))
exp(cbind(coef(glm.select), confint(glm.select)))
# All effects on target:
plot(allEffects(glm.select), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
plot(allEffects(glm.select), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
plot(allEffects(log(glm.select)), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
plot(allEffects(glm.select), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
plot(effect("Active", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="og(Recovered)", rug=FALSE, main="")
# a very clear relation
plot(effect("Active", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="log(Recovered)", rug=FALSE, main="")
# a very clear relation
plot(effect("Deaths", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Deaths", ylab="deaths", rug=FALSE, main="")
# a very clear relation
plot(effect("Deaths", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Deaths", ylab="Recovered", rug=FALSE, main="")
# a very clear relation
plot(effect("Confirmed", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Confirmed", ylab="Recovered", rug=FALSE, main="")
# a very clear relation
glm.select.qp <- glm(DRecovered ~ Hospitalization_Rate*Confirmed +
Case_Fatality_Ratio*Active + Deaths:Active + Province_State,
family = 'quasipoisson', data=training, offset = log(Confirmed))
glm.select.qp <- glm(Recovered ~ Hospitalization_Rate*Confirmed +
Case_Fatality_Ratio*Active + Deaths:Active + Province_State,
family = 'quasipoisson', data=training, offset = log(Confirmed))
summary(glm.select.qp)
exp(cbind(coef(glm.select.qp), confint(glm.select.qp)))
glm.select.nb <- glm.nb(Recovered ~ Hospitalization_Rate*Confirmed +
Case_Fatality_Ratio*Active + Deaths:Active + Province_State,
data=training)
summary(glm.select.nb)
exp(cbind(coef(glm.select.nb), confint(glm.select.nb)))
plot(allEffects(glm.select.qp), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
plot(effect("Active", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="log(Recovered)", rug=FALSE, main="")
plot(effect("Confirmed", glm.select), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="Confirmed", ylab="Recovered", rug=FALSE, main="")
plot(effect("Active", glm.select.qp), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="log(Recovered)", rug=FALSE, main="")
plot(effect("Confirmed", glm.select.qp), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="log(Recovered)", rug=FALSE, main="")
glm.select.nb <- glm.nb(Recovered ~ Hospitalization_Rate*Confirmed +
Case_Fatality_Ratio*Active + Deaths:Active + Province_State,
data=training)
summary(glm.select.nb)
exp(cbind(coef(glm.select.nb), confint(glm.select.nb)))
plot(allEffects(glm.select.nb), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
glm.select.nb <- glm.nb(Recovered ~ Hospitalization_Rate*Confirmed +
Case_Fatality_Ratio*Active + Deaths:Active + Province_State,
data=training, family='poisson')
glm.select.nb <- glm.nb(Recovered ~ Hospitalization_Rate*Confirmed +
Case_Fatality_Ratio*Active + Deaths:Active + Province_State,
data=training)
summary(glm.select.nb)
plot(training$Confirmed, exp(predict(glm.select.qp, type = "response"))-1,
xlab="actual",ylab="predicted")
abline(a=0,b=1);
cor(training$Confirmed,predict(fit.lm, type = "response"))^2
plot(training$Confirmed, exp(predict(glm.select.qp, newdata = training, type = "response"))-1,
xlab="actual",ylab="predicted")
abline(a=0,b=1);
cor(training$Confirmed,predict(fit.lm, type = "response"))^2
predict(glm.select.qp, type = "response")
plot(training$Recovered, exp(predict(glm.select.qp, type = "response"))-1,
xlab="actual",ylab="predicted")
abline(a=0,b=1);
plot(training$Recovered, exp(predict(glm.select.qp, type = "response")),
xlab="actual",ylab="predicted")
abline(a=0,b=1);
plot(training$Recovered, predict(glm.select.qp, type = "response"),
xlab="actual",ylab="predicted")
abline(a=0,b=1);
glm.select.qp <- glm(Recovered ~ Hospitalization_Rate*Confirmed +
Case_Fatality_Ratio*Active + Deaths:Active + Province_State,
family = 'quasipoisson', data=training)
summary(glm.select.qp)
exp(cbind(coef(glm.select.qp), confint(glm.select.qp)))
plot(allEffects(glm.select.qp), rescale.axis=FALSE, multiline=TRUE, rug=FALSE, main="")
plot(effect("Active", glm.select.qp), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="log(Recovered)", rug=FALSE, main="")
plot(effect("Confirmed", glm.select.qp), ci.style="band", rescale.axis=FALSE, multiline=TRUE, xlab="active", ylab="log(Recovered)", rug=FALSE, main="")
plot(training$Recovered, predict(glm.select.qp, type = "response"),
xlab="actual",ylab="predicted")
abline(a=0,b=1);
plot(training$Recovered, predict(glm.select.qp, type = "response"),
xlab="actual",ylab="predicted")
abline(a=0,b=1);
cor(training$Confirmed,predict(glm.select.qp, type = "response"))^2
plot(training$Recovered, predict(glm.select.qp, type = "response"),
xlab="actual",ylab="predicted")
abline(a=0,b=1
cor(training$Confirmed,predict(glm.select.qp, type = "response"))^2
plot(training$Recovered, predict(glm.select.nb, type = "response"),
xlab="actual",ylab="predicted")
abline(a=0,b=1
plot(training$Recovered, predict(glm.select.qp, type = "response"),
xlab="actual",ylab="predicted")
abline(a=0,b=1)
plot(training$Recovered, predict(glm.select.nb, type = "response"),
xlab="actual",ylab="predicted")
abline(a=0,b=1)
cor(training$Confirmed,predict(glm.select.nb, type = "response"))^2
predictions = round(predict(glm.select.qp, newdata=testing, type = "response"), digits=0)
predictions = round(predict(glm.select.qp, newdata=testing, type = "response"), digits=0)
head(predictions,20)
preds = predict(glm.select.qp, newdata=testing, type = "link", se.fit=T)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
fit[1:10] # these predictions are in log-scale
preds = predict(glm.select.qp, newdata=testing, type = "link", se.fit=T)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit # these predictions are in log-scale
fit2 <- fit.poisson$family$linkinv(fit)
preds = predict(glm.select.qp, newdata=testing, type = "link", se.fit=T)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit # these predictions are in log-scale
fit2 <- glm.select.qp$family$linkinv(fit)
upr2 <- glm.select.qp$family$linkinv(upr)
lwr2 <- glm.select.qp$family$linkinv(lwr)
fit2[1:10]
preds = predict(glm.select.qp, newdata=testing, type = "link", se.fit=T)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit # these predictions are in log-scale
fit2 <- glm.select.qp$family$linkinv(fit)
upr2 <- glm.select.qp$family$linkinv(upr)
lwr2 <- glm.select.qp$family$linkinv(lwr)
fit2[1:10]
data.frame(lower=lwr2, prediction=round(fit2,digits=0), upper=upr2)[1:10,]
preds = predict(glm.select.qp, newdata=testing, type = "link", se.fit=T)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit # these predictions are in log-scale
fit2 <- glm.select.qp$family$linkinv(fit)
upr2 <- glm.select.qp$family$linkinv(upr)
lwr2 <- glm.select.qp$family$linkinv(lwr)
data.frame(lower=lwr2, prediction=round(fit2,digits=0), upper=upr2)[1:10,]
# But how can we guess the predictive power of the models?
train <- sample(1:nrow(training), round(nrow(training)*0.80,0))
covid.train <- training[train,]
covid.test <- training[-train,]
fit.qpoisson <- glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, family = "poisson", data = covid.train)
pred = predict(fit.qpoisson, newdata=covid.test, type = "response")
# conditional error:
rmse = sqrt(mean((pred-covid.test$Recovered)^2))
rmse
# unconditional error:
sd(covid.test$Recovered)
# GLM is able to reduce 25% the original noise
# R2 in testing set:
cor(pred,covid.test$Recovered)^2
# But how can we guess the predictive power of the models?
train <- sample(1:nrow(training), round(nrow(training)*0.80,0))
covid.train <- training[train,]
covid.test <- training[-train,]
fit.qpoisson <- glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, family = "poisson", data = covid.train)
pred = predict(fit.qpoisson, newdata=covid.test, type = "response")
# conditional error:
rmse = sqrt(mean((exp(pred)-covid.test$Recovered)^2))
rmse
# unconditional error:
sd(covid.test$Recovered)
# GLM is able to reduce 25% the original noise
# R2 in testing set:
cor(pred,covid.test$Recovered)^2
# But how can we guess the predictive power of the models?
train <- sample(1:nrow(training), round(nrow(training)*0.80,0))
covid.train <- training[train,]
covid.test <- training[-train,]
fit.qpoisson <- glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, family = "poisson", data = covid.train)
pred = predict(fit.qpoisson, newdata=covid.test, type = "response")
# conditional error:
rmse = sqrt(mean((pred-log(covid.test$Recovered))^2))
rmse
# unconditional error:
sd(covid.test$Recovered)
# GLM is able to reduce 25% the original noise
# R2 in testing set:
cor(pred,covid.test$Recovered)^2
pred
# But how can we guess the predictive power of the models?
train <- sample(1:nrow(training), round(nrow(training)*0.80,0))
covid.train <- training[train,]
covid.test <- training[-train,]
fit.qpoisson <- glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, family = "poisson", data = covid.train)
pred = predict(fit.qpoisson, newdata=covid.test, type = "response")
# conditional error:
rmse = sqrt(mean((pred - covid.test$Recovered)^2))
rmse
# But how can we guess the predictive power of the models?
train <- sample(1:nrow(training), round(nrow(training)*0.80,0))
covid.train <- training[train,]
covid.test <- training[-train,]
fit.qpoisson <- glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, family = "poisson", data = covid.train)
pred = predict(fit.qpoisson, newdata=covid.test, type = "response")
# conditional error:
rmse = mean((pred - covid.test$Recovered)^2)
rmse
# But how can we guess the predictive power of the models?
train <- sample(1:nrow(training), round(nrow(training)*0.80,0))
covid.train <- training[train,]
covid.test <- training[-train,]
fit.qpoisson <- glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, family = "poisson", data = covid.train)
pred = predict(fit.qpoisson, newdata=covid.test, type = "response")
# conditional error:
rmse = sqrt(mean((pred - covid.test$Recovered)^2))
rmse
# But how can we guess the predictive power of the models?
train <- sample(1:nrow(training), round(nrow(training)*0.80,0))
covid.train <- training[train,]
covid.test <- training[-train,]
fit.qpoisson <- glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, family = "poisson", data = covid.train)
pred = predict(fit.qpoisson, newdata=covid.test, type = "response")
rmse = sqrt(mean((pred - covid.test$Recovered)^2))
rmse
sd(covid.test$Recovered)
cor(pred,covid.test$Recovered)^2
predictions = round(predict(glm.select.nb, newdata=testing, type = "response"), digits=0)
head(predictions,20)
cor(training$Confirmed,predict(glm.select.nb, type = "response"))^2
preds = predict(glm.select.nb, newdata=testing, type = "link", se.fit=T)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit # these predictions are in log-scale
fit2 <- glm.select.nb$family$linkinv(fit)
upr2 <- glm.select.nb$family$linkinv(upr)
lwr2 <- glm.select.nb$family$linkinv(lwr)
data.frame(lower=lwr2, prediction=round(fit2,digits=0), upper=upr2)[1:10,]
fit.nb <- nb.glm(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, data = covid.train)
fit.nb <- glm.nb(Recovered ~ Hospitalization_Rate * Confirmed +
Case_Fatality_Ratio * Active + Deaths:Active + Province_State, data = covid.train)
pred = predict(fit.nb, newdata=covid.test, type = "response")
rmse = sqrt(mean((pred - covid.test$Recovered)^2))
rmse
sd(covid.test$Recovered)
cor(pred, covid.test$Recovered)^2
